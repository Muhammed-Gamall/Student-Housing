// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sakan.Models;

#nullable disable

namespace sakan.Migrations
{
    [DbContext(typeof(SakanDbContext))]
    partial class SakanDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("sakan.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("passwared")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("sakan.Models.AdminHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("HouseOwnerID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfBeds")
                        .HasColumnType("int");

                    b.Property<int>("NumOfRooms")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Photo2")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Photo3")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Photo4")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HouseOwnerID");

                    b.ToTable("AdminHouses");
                });

            modelBuilder.Entity("sakan.Models.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("HouseOwnerID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfBeds")
                        .HasColumnType("int");

                    b.Property<int>("NumOfRooms")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Photo2")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Photo3")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Photo4")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HouseOwnerID");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("sakan.Models.HouseOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("HouseOwners");
                });

            modelBuilder.Entity("sakan.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminHouseId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HouseID")
                        .HasColumnType("int");

                    b.Property<int?>("HouseNum")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("faculty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminHouseId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("HouseID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("sakan.Models.AdminHouse", b =>
                {
                    b.HasOne("sakan.Models.HouseOwner", "HouseOwner")
                        .WithMany()
                        .HasForeignKey("HouseOwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HouseOwner");
                });

            modelBuilder.Entity("sakan.Models.House", b =>
                {
                    b.HasOne("sakan.Models.HouseOwner", "HouseOwner")
                        .WithMany("Houses")
                        .HasForeignKey("HouseOwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HouseOwner");
                });

            modelBuilder.Entity("sakan.Models.Student", b =>
                {
                    b.HasOne("sakan.Models.AdminHouse", null)
                        .WithMany("Student")
                        .HasForeignKey("AdminHouseId");

                    b.HasOne("sakan.Models.House", "House")
                        .WithMany("Student")
                        .HasForeignKey("HouseID");

                    b.Navigation("House");
                });

            modelBuilder.Entity("sakan.Models.AdminHouse", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("sakan.Models.House", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("sakan.Models.HouseOwner", b =>
                {
                    b.Navigation("Houses");
                });
#pragma warning restore 612, 618
        }
    }
}
